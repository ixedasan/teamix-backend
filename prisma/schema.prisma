generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String
  username        String         @unique
  displayName     String         @map("display_name")
  avatar          String?
  bio             String?
  isVerified      Boolean        @default(false) @map("is_verified")
  isEmailVerified Boolean        @default(false) @map("is_email_verified")
  isTotpEnabled   Boolean        @default(false) @map("is_totp_enabled")
  totpSecret      String?        @map("totp_secret")
  tokens          Token[]
  socialLinks     SocialLink[]
  memberships     Member[]
  tasks           Task[]
  assignedTasks   TaskAssignee[]
  comments        Comment[]
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  @@map("users")
}

model SocialLink {
  id        String   @id @default(uuid())
  title     String
  url       String
  position  Int
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("social_links")
}

model Token {
  id        String    @id @default(uuid())
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @map("user_id")
  projectId String?   @map("project_id")
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role?
  email     String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("tokens")
}

model Project {
  id          String      @id @default(uuid())
  name        String
  cover       String?
  description String?
  tokens      Token[]
  members     Member[]
  tasks       Task[]
  labels      TaskLabel[]
  documents   Document[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("projects")
}

model Member {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, projectId])
  @@map("members")
}

model Task {
  id          String         @id @default(uuid())
  title       String
  description String?
  status      TaskStatus
  priority    Priority?
  labels      TaskLabel[]
  startDate   DateTime?      @map("start_date")
  dueDate     DateTime?      @map("due_date")
  assignees   TaskAssignee[]
  comments    Comment[]
  createdById String         @map("created_by_id")
  createdBy   User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  projectId   String
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  @@map("tasks")
}

model TaskAssignee {
  id        String   @id @default(uuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([taskId, userId])
  @@map("task_assignees")
}

model TaskLabel {
  id        String   @id @default(uuid())
  name      String
  color     String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("task_labels")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Document {
  id        String   @id @default(uuid())
  title     String
  content   Json
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("documents")
}

enum TokenType {
  EMAIL_VERIFY
  PASSWORD_RESET
  INVITATION

  @@map("token_types")
}

enum Role {
  ADMIN
  MEMBER
  VIEWER

  @@map("roles")
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
  CANCELLED

  @@map("task_statuses")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@map("priorities")
}
