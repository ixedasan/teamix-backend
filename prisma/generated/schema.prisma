generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  password             String
  username             String                @unique
  displayName          String                @map("display_name")
  avatar               String?
  bio                  String?
  telegramId           String?               @unique @map("telegram_id")
  isVerified           Boolean               @default(false) @map("is_verified")
  isEmailVerified      Boolean               @default(false) @map("is_email_verified")
  isTotpEnabled        Boolean               @default(false) @map("is_totp_enabled")
  totpSecret           String?               @map("totp_secret")
  tokens               Token[]
  socialLinks          SocialLink[]
  memberships          Member[]
  tasks                Task[]
  assignedTasks        TaskAssignee[]
  comments             Comment[]
  notifications        Notification[]
  notificationSettings NotificationSettings?
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")

  @@index([email])
  @@index([username])
  @@index([createdAt])
  @@map("users")
}

model SocialLink {
  id        String   @id @default(uuid())
  title     String
  url       String
  position  Int
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("social_links")
}

model Token {
  id        String    @id @default(uuid())
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @map("user_id")
  projectId String?   @map("project_id")
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role?
  email     String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("tokens")
}

model Project {
  id                  String                @id @default(uuid())
  name                String
  cover               String?
  icon                String?
  description         String?
  tokens              Token[]
  plan                ProjectPlan           @default(FREE)
  projectSubscription ProjectSubscription[]
  members             Member[]
  tasks               Task[]
  labels              TaskLabel[]
  documents           Document[]
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")

  @@map("projects")
}

model ProjectSubscription {
  id                   String            @id @default(uuid())
  projectId            String
  project              Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stripeSubscriptionId String?           @map("stripe_subscription_id")
  stripeCustomerId     String?           @map("stripe_customer_id")
  status               TransactionStatus @default(PENDING)
  expiresAt            DateTime?         @map("expires_at")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")

  @@index([projectId])
  @@map("project_subscriptions")
}

model Member {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@map("members")
}

model Task {
  id          String         @id @default(uuid())
  title       String
  description String?
  status      TaskStatus
  priority    Priority?
  position    Int            @default(1)
  labels      TaskLabel[]
  startDate   DateTime?      @map("start_date")
  dueDate     DateTime?      @map("due_date")
  assignees   TaskAssignee[]
  attachments Attachment[]
  links       Link[]
  comments    Comment[]
  createdById String         @map("created_by_id")
  createdBy   User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  projectId   String
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("tasks")
}

model TaskAssignee {
  id        String   @id @default(uuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([taskId, userId])
  @@index([userId])
  @@index([taskId])
  @@map("task_assignees")
}

model TaskLabel {
  id        String   @id @default(uuid())
  name      String
  color     String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([projectId])
  @@map("task_labels")
}

model Attachment {
  id        String   @id @default(uuid())
  filename  String
  filepath  String
  mimeType  String
  size      Int
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([taskId])
  @@map("attachments")
}

model Link {
  id        String   @id @default(uuid())
  url       String
  title     String?
  taskId    String   @map("task_id")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([taskId])
  @@map("links")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([taskId])
  @@map("comments")
}

model Document {
  id        String   @id @default(uuid())
  title     String?
  content   Json?
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([projectId])
  @@map("documents")
}

model Notification {
  id        String           @id @default(uuid())
  message   String
  type      NotificationType
  isRead    Boolean          @default(false) @map("is_read")
  userId    String?          @map("user_id")
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  @@map("notifications")
}

model NotificationSettings {
  id                   String   @id @default(uuid())
  siteNotification     Boolean  @default(true) @map("site_notification")
  telegramNotification Boolean  @default(false) @map("telegram_notification")
  userId               String   @unique @map("user_id")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@map("notification_settings")
}

enum TokenType {
  EMAIL_VERIFY
  PASSWORD_RESET
  TELEGRAM_AUTH
  INVITATION

  @@map("token_types")
}

enum Role {
  ADMIN
  MEMBER
  VIEWER

  @@map("roles")
}

enum ProjectPlan {
  FREE
  PRO
  ENTERPRISE

  @@map("project_plans")
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
  CANCELLED

  @@map("task_statuses")
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
  URGENT

  @@map("priorities")
}

enum NotificationType {
  ENABLE_TWO_FACTOR
  PROJECT_INVITATION
  TASK_ASSIGNED
  TASK_OVERDUE
  TASK_COMMENT

  @@map("notification_types")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED

  @@map("transaction_statuses")
}
