# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AttachmentModel {
  createdAt: DateTime!
  filename: String!
  filepath: String!
  id: ID!
  mimeType: String!
  size: Float!
  taskId: ID!
  updatedAt: DateTime!
}

type AuthModel {
  message: String
  user: UserModel
}

input ChangeDocumentInput {
  content: JSON
  title: String
}

input ChangeEmailInput {
  email: String!
}

input ChangeNotificationSettingsInput {
  siteNotification: Boolean!
  telegramNotification: Boolean!
}

type ChangeNotificationsSettingsResponse {
  notificationSettings: NotificationSettingsModel!
  telegramAuthToken: String
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangeProfileInfoInput {
  bio: String
  displayName: String!
  username: String!
}

input ChangeRoleInput {
  role: String!
  userId: String!
}

input ChangeStatusInput {
  status: TaskStatus
  taskId: ID!
}

type CommentModel {
  author: UserModel!
  authorId: ID!
  content: String!
  createdAt: DateTime!
  id: ID!
  taskId: ID!
  updatedAt: DateTime!
}

input CreateDocumentInput {
  title: String!
}

input CreateLabelInput {
  color: String!
  name: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeviceModel {
  browser: String!
  os: String!
  type: String!
}

type DocumentModel {
  content: JSON!
  createdAt: DateTime!
  id: ID!
  projectId: String!
  title: String!
  updatedAt: DateTime!
}

input EnableTotpInput {
  pin: String!
  secret: String!
}

input InviteMemberInput {
  email: String!
  role: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LocationModel {
  city: String!
  country: String!
  latitude: Float!
  longitude: Float!
}

input LoginInput {
  login: String!
  password: String!
  pin: String
}

type MemberModel {
  createdAt: DateTime!
  id: ID!
  projectId: ID!
  role: String!
  updatedAt: DateTime!
  userId: ID!
}

type Mutation {
  acceptProjectInvitation(token: String!): Boolean!
  addLabelToTask(labelId: String!, taskId: String!): Boolean!
  assignTask(taskId: String!, userId: String!): Boolean!
  changeDocument(documentId: String!, input: ChangeDocumentInput!): DocumentModel!
  changeEmail(data: ChangeEmailInput!): Boolean!
  changeMemberRole(data: ChangeRoleInput!): Boolean!
  changeNotificationsSettings(data: ChangeNotificationSettingsInput!): ChangeNotificationsSettingsResponse!
  changePassword(data: ChangePasswordInput!): Boolean!
  changeProfileAvatar(avatar: Upload!): Boolean!
  changeProfileInfo(data: ChangeProfileInfoInput!): Boolean!
  changeProjectCover(cover: Upload!): Boolean!
  changeTaskStatus(input: ChangeStatusInput!): TaskModel!
  clearSessionCookie: Boolean!
  createDocument(data: CreateDocumentInput!): Boolean!
  createProject(data: ProjectInput!): Boolean!
  createSocialLink(data: SocialLinkInput!): Boolean!
  createTask(input: TaskInput!): TaskModel!
  createTaskLabel(input: CreateLabelInput!): Boolean!
  createTaskLink(input: TaskLinkInput!, taskId: String!): Boolean!
  createUser(data: CreateUserInput!): Boolean!
  deleteComment(commentId: String!): Boolean!
  deleteDocument(documentId: String!): Boolean!
  deleteProject: Boolean!
  deleteTask(taskId: String!): TaskModel!
  deleteTaskAttachment(id: String!): Boolean!
  deleteTaskLabel(labelId: String!): Boolean!
  deleteTaskLink(linkId: String!): Boolean!
  disableTotp: Boolean!
  enableTotp(data: EnableTotpInput!): Boolean!
  generateAttachmentDownloadUrl(id: String!): String!
  inviteProjectMember(data: InviteMemberInput!): Boolean!
  loginUser(data: LoginInput!): AuthModel!
  logoutUser: Boolean!
  newPassword(data: NewPasswordInput!): Boolean!
  removeLabelFromTask(labelId: String!, taskId: String!): Boolean!
  removeProfileAvatar: Boolean!
  removeProjectCover: Boolean!
  removeProjectMember(userId: String!): Boolean!
  removeSession(id: String!): Boolean!
  removeSocialLink(id: String!): Boolean!
  reorderSocialLink(list: [SocialLinkOrderInput!]!): Boolean!
  resetPassword(data: ResetPasswordInput!): Boolean!
  sendComment(input: SendCommentInput!): CommentModel!
  setCurrentProject(projectId: String!): Boolean!
  unassignTask(taskId: String!, userId: String!): Boolean!
  updateProjectInfo(data: ProjectInput!): Boolean!
  updateSocialLink(data: SocialLinkInput!, id: String!): Boolean!
  updateTask(input: TaskInput!, taskId: String!): TaskModel!
  updateTaskLink(input: TaskLinkInput!, linkId: String!): Boolean!
  uploadTaskAttachment(file: Upload!, taskId: String!): Boolean!
  verifyAccaunt(data: VerificationInput!): UserModel!
}

input NewPasswordInput {
  password: String!
  passwordConfirmation: String!
  token: String!
}

type NotificationModel {
  createdAt: DateTime!
  id: String!
  isRead: Boolean!
  message: String!
  type: NotificationType!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

type NotificationSettingsModel {
  createdAt: DateTime!
  id: String!
  siteNotification: Boolean!
  telegramNotification: Boolean!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

enum NotificationType {
  ENABLE_TWO_FACTOR
  PROJECT_INVITATION
  TASK_ASSIGNED
  TASK_COMMENT
  TASK_OVERDUE
}

enum Priority {
  HIGH
  LOW
  MEDIUM
  NONE
  URGENT
}

input ProjectInput {
  description: String
  name: String!
}

type ProjectModel {
  cover: String
  createdAt: DateTime!
  description: String
  id: ID!
  members: [MemberModel!]!
  name: String!
  updatedAt: DateTime!
}

type Query {
  findAllTasks: [TaskModel!]!
  findCommentsByTask(taskId: String!): [CommentModel!]!
  findCurrentSession: SessionModel!
  findDocument(documentId: String!): DocumentModel!
  findDocumentsByProject: [DocumentModel!]!
  findNotificationsByUser: [NotificationModel!]!
  findNotificationsUnreadCount: Float!
  findProfile: UserModel!
  findProjectMembers: [MemberModel!]!
  findSessionsByUser: [SessionModel!]!
  findSocialLinks: [SocialLinksModel!]!
  findTask(taskId: String!): TaskModel!
  findTaskAttachments(taskId: String!): [AttachmentModel!]!
  findTaskLabelsByProject: [TaskLabelModel!]!
  findTaskLabelsByTask(taskId: String!): [TaskLabelModel!]!
  findTaskLinks(taskId: String!): [TaskLinkModel!]!
  generateTotpSecret: TotpModel!
  getAllUserProjects: [ProjectModel!]!
  getTaskAssignees(taskId: String!): [TaskAssigneeModel!]!
}

input ResetPasswordInput {
  email: String!
}

input SendCommentInput {
  content: String!
  taskId: ID!
}

type SessionMetadataModel {
  device: DeviceModel!
  ip: String!
  location: LocationModel!
}

type SessionModel {
  createdAt: String!
  id: ID!
  metadata: SessionMetadataModel!
  projectId: String
  userId: String!
}

input SocialLinkInput {
  title: String!
  url: String!
}

input SocialLinkOrderInput {
  id: String!
  position: Float!
}

type SocialLinksModel {
  createdAt: DateTime!
  id: ID!
  position: Float!
  title: String!
  updatedAt: DateTime!
  url: String!
  userId: String!
}

type Subscription {
  commentAdded(taskId: String!): CommentModel!
  documentUpdated(projectId: String!): DocumentModel!
  taskChanged(projectId: String!): TaskModel!
}

type TaskAssigneeModel {
  createdAt: DateTime!
  id: ID!
  task: TaskModel!
  taskId: ID!
  updatedAt: DateTime!
  user: UserModel!
  userId: ID!
}

input TaskInput {
  assigneeId: ID
  description: String
  dueDate: DateTime
  labelsIds: [ID!]
  priority: Priority!
  startDate: DateTime
  status: TaskStatus!
  title: String!
}

type TaskLabelModel {
  color: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  projectId: ID!
  updatedAt: DateTime!
}

input TaskLinkInput {
  title: String
  url: String!
}

type TaskLinkModel {
  createdAt: DateTime!
  id: ID!
  taskId: ID!
  title: String
  updatedAt: DateTime!
  url: String!
}

type TaskModel {
  assignees: [TaskAssigneeModel!]!
  comments: [CommentModel!]!
  createdAt: DateTime!
  createdBy: UserModel!
  createdById: ID!
  description: String
  dueDate: DateTime
  id: ID!
  labels: [TaskLabelModel!]!
  links: [TaskLinkModel!]!
  priority: Priority!
  project: ProjectModel!
  projectId: ID!
  startDate: DateTime
  status: TaskStatus!
  title: String!
  updatedAt: DateTime!
}

enum TaskStatus {
  BACKLOG
  CANCELLED
  DONE
  IN_PROGRESS
  TODO
}

type TotpModel {
  qrCodeUrl: String!
  secret: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserModel {
  avatar: String
  bio: String
  createdAt: DateTime!
  displayName: String!
  email: String!
  id: ID!
  isEmailVerified: Boolean!
  isTotpEnabled: Boolean!
  isVerified: Boolean!
  notificationSettings: NotificationSettingsModel!
  notifications: [NotificationModel!]!
  password: String!
  socialLinks: [SocialLinksModel!]!
  telegramId: String
  totpSecret: String
  updatedAt: DateTime!
  username: String!
}

input VerificationInput {
  token: String!
}